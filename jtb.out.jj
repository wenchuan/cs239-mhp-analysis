/* Generated by JTB 1.4.4 */


options
{
  JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(MiniX10Parser)
import syntaxtree.*;


public class MiniX10Parser {}

class JTBToolkit {

  static NodeToken makeNodeToken(final Token t) {
    return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
  }
}

PARSER_END(MiniX10Parser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

SPECIAL_TOKEN :
{
  < SINGLE_LINE_COMMENT : "//" ( ~["\n", "\r"] )* ( "\n"| "\r"| "\r\n" ) >
| < FORMAL_COMMENT : "/**" ( ~["*"] )* "*" ( "*"| ( ~["*", "/"] ( ~["*"] )* "*" ) )* "/" >
| < MULTI_LINE_COMMENT : "/*" ( ~["*"] )* "*" ( "*"| ( ~["*", "/"] ( ~["*"] )* "*" ) )* "/" >
}

TOKEN :
{
  < LPAREN : "(" >
| < RPAREN : ")" >
| < LSQPAREN : "[" >
| < RSQPAREN : "]" >
| < LBRACE : "{" >
| < RBRACE : "}" >
| < SEMICOLON : ";" >
| < DOT : "." >
| < ASSIGN : "=" >
| < LT : "<" >
| < PLUS : "+" >
| < MINUS : "-" >
| < AND : "&&" >
| < NOT : "!" >
| < QUESTION : "?" >
| < CLASS : "class" >
| < VALUE : "value" >
| < FINAL : "final" >
| < IF : "if" >
| < ELSE : "else" >
| < FALSE : "false" >
| < TRUE : "true" >
| < WHILE : "while" >
| < VOID : "void" >
| < BOOLEAN : "boolean" >
| < INTEGER : "int" >
| < NEW : "new" >
| < GET : "get" >
| < CONTAINS : "contains" >
| < HIGH : "high" >
| < LOW : "low" >
| < NEXT : "next" >
| < PREV : "prev" >
| < ISFIRST : "isFirst" >
| < ISLAST : "isLast" >
| < COORD : "coord" >
| < ORDINAL : "ordinal" >
| < PUBLIC : "public" >
| < RETURN : "return" >
| < STATIC : "static" >
| < STRING : "String" >
| < THIS : "this" >
| < PRINTLN : "System.out.println" >
| < PRINT : "System.out.print" >
| < PRINTERROR : "System.err.println" >
| < CURRENTTIME : "System.currentTimeMillis" >
| < ADDLOCALOPS : "x10.lang.perf.addLocalOps" >
| < JAVAIOSIZE : "java.io.Integer.SIZE" >
| < FACTORYPlace : "dist.factory.place" >
| < FACTORYBlock : "dist.factory.block" >
| < FACTORYEMPTYREGION : "region.factory.emptyRegion" >
| < FACTORYPOINT : "point.factory.point" >
| < JAVALANGOBJECT : "java.lang.Object" >
| < BREAK : "break" >
| < SUPER : "super" >
| < THROW : "throw" >
| < RUNTIMEEXCEPTION : "RuntimeException" >
| < DOUBLE : "double" >
| < LONG : "long" >
| < SHORT : "short" >
| < BYTE : "byte" >
| < REGION : "region" >
| < ID : "id" >
| < PLACES : "place.places" >
| < RANK : "rank" >
| < DISTRIBUTION : "distribution" >
| < DIST : "dist" >
| < SWITCH : "switch" >
| < ATEACH : "ateach" >
| < FINISH : "finish" >
| < MAIN : "main" >
| < MATH : "Math" >
| < SIN : "sin" >
| < COS : "cos" >
| < POW : "pow" >
| < EXP : "exp" >
| < SQRT : "sqrt" >
| < ABS : "abs" >
| < PLACE : "place" >
| < MIN : "min" >
| < MAX : "max" >
| < LOG : "log" >
| < SUM : "sum" >
| < SIZE : "size" >
| < EQUALS : "equals" >
| < PRIVATE : "private" >
| < FOREACH : "foreach" >
| < FINALLY : "finally" >
| < POINT : "point" >
| < CONTINUE : "continue" >
| < INSTANCEOF : "instanceof" >
| < DO : "do" >
| < FOR : "for" >
| < HERE : "here" >
| < DISTUNIQUE : "dist.UNIQUE" >
| < CASE : "case" >
| < ASYNC : "async" >
| < OR : "or" >
| < DEFAULT_TOKEN : "default" >
}

TOKEN :
{
  < INTEGER_LITERAL : ( ["1"-"9"] ( ["0"-"9"] )*| "0" ) >
| < POINT_LITERAL : <DECIMAL_LITERAL> ( ["p", "P"] )| <HEX_LITERAL> ( ["p", "P"] )| <OCTAL_LITERAL> ( ["p", "P"] ) >
| < #DECIMAL_LITERAL : ["1"-"9"] ( ["0"-"9"] )* >
| < HEX_LITERAL : "0" ["x", "X"] ( ["0"-"9", "a"-"f", "A"-"F"] )+ >
| < LONG_LITERAL : <INTEGER_LITERAL> "L"| <HEX_LITERAL> "L" >
| < #OCTAL_LITERAL : "0" ( ["0"-"7"] )* >
| < FLOATING_POINT_LITERAL : ( ["0"-"9"] )+ "." ( ["0"-"9"] )* ( <EXPONENT> )? ( ["f", "F", "d", "D"] )?| "." ( ["0"-"9"] )+ ( <EXPONENT> )? ( ["f", "F", "d", "D"] )?| ( ["0"-"9"] )+ <EXPONENT> ( ["f", "F", "d", "D"] )?| ( ["0"-"9"] )+ ( <EXPONENT> )? ["f", "F", "d", "D"] >
| < #EXPONENT : ["e", "E"] ( ["+", "-"] )? ( ["0"-"9"] )+ >
| < CHARACTER_LITERAL : "'" ( ( ~["'", "\\", "\n", "\r"] )| ( "\\" ( ["n", "t", "b", "r", "f", "\\", "'", "\""]| ["0"-"7"] ( ["0"-"7"] )?| ["0"-"3"] ["0"-"7"] ["0"-"7"] ) ) ) "'" >
| < STRING_LITERAL : "\"" ( ( ~["\"", "\\", "\n", "\r"] )| ( "\\" ( ["n", "t", "b", "r", "f", "\\", "'", "\""]| ["0"-"7"] ( ["0"-"7"] )?| ["0"-"3"] ["0"-"7"] ["0"-"7"] ) ) )* "\"" >
}

TOKEN :
{
  < IDENTIFIER : <LETTER> ( <LETTER>| <DIGIT> )* >
| < #LETTER : ["$", "A"-"Z", "_", "a"-"z", "\u00c0"-"\u00d6", "\u00d8"-"\u00f6", "\u00f8"-"\u00ff", "\u0100"-"\u1fff", "\u3040"-"\u318f", "\u3300"-"\u337f", "\u3400"-"\u3d2d", "\u4e00"-"\u9fff", "\uf900"-"\ufaff"] >
| < #DIGIT : ["0"-"9", "\u0660"-"\u0669", "\u06f0"-"\u06f9", "\u0966"-"\u096f", "\u09e6"-"\u09ef", "\u0a66"-"\u0a6f", "\u0ae6"-"\u0aef", "\u0b66"-"\u0b6f", "\u0be7"-"\u0bef", "\u0c66"-"\u0c6f", "\u0ce6"-"\u0cef", "\u0d66"-"\u0d6f", "\u0e50"-"\u0e59", "\u0ed0"-"\u0ed9", "\u1040"-"\u1049"] >
}

TOKEN :
{
  < RUNSIGNEDSHIFT : ">>>" >
| < RSIGNEDSHIFT : ">>" >
| < GT : ">" >
}

/* We use productions to match >>>, >> and > so that we can keep the
 * type declaration syntax with generics clean
 */
/*************************************
 * The MiniX10 Grammar Starts Here *
 *************************************/
File File() :
{
  // --- JTB generated node declarations ---
  NodeListOptional n0 = new NodeListOptional();
  TopLevelDeclaration n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
}
{
  (
    n1 = TopLevelDeclaration()
    { n0.addNode(n1); }
  )*
  { n0.nodes.trimToSize(); }
  n3 = < EOF > {
    n3.beginColumn++;
    n3.endColumn++;
    { n2 = JTBToolkit.makeNodeToken(n3); }
  }
  { return new File(n0, n2); }
}

TopLevelDeclaration TopLevelDeclaration() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  MainClass n1 = null;
  ClassDeclaration n2 = null;
}
{
  (
    LOOKAHEAD( 12 )
    n1 = MainClass()
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    LOOKAHEAD( 2 )
    n2 = ClassDeclaration()
    { n0 = new NodeChoice(n2, 1, 2); }
  )
  { return new TopLevelDeclaration(n0); }
}

MainClass MainClass() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  Identifier n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
  NodeToken n21 = null;
  Token n22 = null;
  Identifier n23 = null;
  NodeToken n24 = null;
  Token n25 = null;
  NodeToken n26 = null;
  Token n27 = null;
  Statement n28 = null;
  NodeToken n29 = null;
  Token n30 = null;
  NodeToken n31 = null;
  Token n32 = null;
}
{
  n1 = "public"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = "class"
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n4 = Identifier()
  n6 = "{"
  { n5 = JTBToolkit.makeNodeToken(n6); }
  n8 = "public"
  { n7 = JTBToolkit.makeNodeToken(n8); }
  n10 = "static"
  { n9 = JTBToolkit.makeNodeToken(n10); }
  n12 = "void"
  { n11 = JTBToolkit.makeNodeToken(n12); }
  n14 = "main"
  { n13 = JTBToolkit.makeNodeToken(n14); }
  n16 = "("
  { n15 = JTBToolkit.makeNodeToken(n16); }
  n18 = "String"
  { n17 = JTBToolkit.makeNodeToken(n18); }
  n20 = "["
  { n19 = JTBToolkit.makeNodeToken(n20); }
  n22 = "]"
  { n21 = JTBToolkit.makeNodeToken(n22); }
  n23 = Identifier()
  n25 = ")"
  { n24 = JTBToolkit.makeNodeToken(n25); }
  n27 = "{"
  { n26 = JTBToolkit.makeNodeToken(n27); }
  n28 = Statement()
  n30 = "}"
  { n29 = JTBToolkit.makeNodeToken(n30); }
  n32 = "}"
  { n31 = JTBToolkit.makeNodeToken(n32); }
  { return new MainClass(n0, n2, n4, n5, n7, n9, n11, n13, n15, n17, n19, n21, n23, n24, n26, n28, n29, n31); }
}

ClassDeclaration ClassDeclaration() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Identifier n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeListOptional n5 = new NodeListOptional();
  ClassMember n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
}
{
  n1 = "class"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Identifier()
  n4 = "{"
  { n3 = JTBToolkit.makeNodeToken(n4); }
  (
    n6 = ClassMember()
    { n5.addNode(n6); }
  )*
  { n5.nodes.trimToSize(); }
  n8 = "}"
  { n7 = JTBToolkit.makeNodeToken(n8); }
  { return new ClassDeclaration(n0, n2, n3, n5, n7); }
}

ClassMember ClassMember() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  MethodDeclaration n1 = null;
  ConstantDeclaration n2 = null;
  UpdatableFieldDeclaration n3 = null;
}
{
  (
    LOOKAHEAD( "public" ReturnType() Identifier() "(" )
    n1 = MethodDeclaration()
    { n0 = new NodeChoice(n1, 0, 3); }
  |
    LOOKAHEAD( 2 )
    n2 = ConstantDeclaration()
    { n0 = new NodeChoice(n2, 1, 3); }
  |
    n3 = UpdatableFieldDeclaration()
    { n0 = new NodeChoice(n3, 2, 3); }
  )
  { return new ClassMember(n0); }
}

ConstantDeclaration ConstantDeclaration() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  Type n6 = null;
  Identifier n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  Expression n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
}
{
  n1 = "public"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = "static"
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n5 = "final"
  { n4 = JTBToolkit.makeNodeToken(n5); }
  n6 = Type()
  n7 = Identifier()
  n9 = "="
  { n8 = JTBToolkit.makeNodeToken(n9); }
  n10 = Expression()
  n12 = ";"
  { n11 = JTBToolkit.makeNodeToken(n12); }
  { return new ConstantDeclaration(n0, n2, n4, n6, n7, n8, n10, n11); }
}

UpdatableFieldDeclaration UpdatableFieldDeclaration() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Type n2 = null;
  Identifier n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
}
{
  n1 = "public"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Type()
  n3 = Identifier()
  n5 = ";"
  { n4 = JTBToolkit.makeNodeToken(n5); }
  { return new UpdatableFieldDeclaration(n0, n2, n3, n4); }
}

MethodDeclaration MethodDeclaration() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  ReturnType n2 = null;
  Identifier n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeOptional n6 = new NodeOptional();
  FormalParameterList n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  Block n10 = null;
}
{
  n1 = "public"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = ReturnType()
  n3 = Identifier()
  n5 = "("
  { n4 = JTBToolkit.makeNodeToken(n5); }
  (
    n7 = FormalParameterList()
    { n6.addNode(n7); }
  )?
  n9 = ")"
  { n8 = JTBToolkit.makeNodeToken(n9); }
  n10 = Block()
  { return new MethodDeclaration(n0, n2, n3, n4, n6, n8, n10); }
}

FormalParameterList FormalParameterList() :
{
  // --- JTB generated node declarations ---
  FormalParameter n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  FormalParameterRest n2 = null;
}
{
  n0 = FormalParameter()
  (
    n2 = FormalParameterRest()
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { return new FormalParameterList(n0, n1); }
}

FormalParameter FormalParameter() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  FinalFormalParameter n1 = null;
  UpdatableFormalParameter n2 = null;
}
{
  (
    n1 = FinalFormalParameter()
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    n2 = UpdatableFormalParameter()
    { n0 = new NodeChoice(n2, 1, 2); }
  )
  { return new FormalParameter(n0); }
}

FinalFormalParameter FinalFormalParameter() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Type n2 = null;
  Identifier n3 = null;
}
{
  n1 = "final"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Type()
  n3 = Identifier()
  { return new FinalFormalParameter(n0, n2, n3); }
}

UpdatableFormalParameter UpdatableFormalParameter() :
{
  // --- JTB generated node declarations ---
  Type n0 = null;
  Identifier n1 = null;
}
{
  n0 = Type()
  n1 = Identifier()
  { return new UpdatableFormalParameter(n0, n1); }
}

FormalParameterRest FormalParameterRest() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  FormalParameter n2 = null;
}
{
  n1 = ","
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = FormalParameter()
  { return new FormalParameterRest(n0, n2); }
}

ReturnType ReturnType() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  VoidType n1 = null;
  Type n2 = null;
}
{
  (
    n1 = VoidType()
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    n2 = Type()
    { n0 = new NodeChoice(n2, 1, 2); }
  )
  { return new ReturnType(n0); }
}

VoidType VoidType() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = "void"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new VoidType(n0); }
}

Type Type() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  UpdatableArrayType n1 = null;
  NonArrayType n2 = null;
}
{
  (
    LOOKAHEAD( UpdatableArrayType() )
    n1 = UpdatableArrayType()
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    n2 = NonArrayType()
    { n0 = new NodeChoice(n2, 1, 2); }
  )
  { return new Type(n0); }
}

UpdatableArrayType UpdatableArrayType() :
{
  // --- JTB generated node declarations ---
  NonArrayType n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  RankEquation n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
}
{
  n0 = NonArrayType()
  n2 = "["
  { n1 = JTBToolkit.makeNodeToken(n2); }
  n4 = ":"
  { n3 = JTBToolkit.makeNodeToken(n4); }
  n5 = RankEquation()
  n7 = "]"
  { n6 = JTBToolkit.makeNodeToken(n7); }
  { return new UpdatableArrayType(n0, n1, n3, n5, n6); }
}

RankEquation RankEquation() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  IntegerLiteral n4 = null;
}
{
  n1 = "rank"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = "=="
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n4 = IntegerLiteral()
  { return new RankEquation(n0, n2, n4); }
}

NonArrayType NonArrayType() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  BooleanType n1 = null;
  IntegerType n2 = null;
  DoubleType n3 = null;
  StringType n4 = null;
  PlaceType n5 = null;
  DistType n6 = null;
  RegionType n7 = null;
  PointType n8 = null;
  ClassNameType n9 = null;
}
{
  (
    n1 = BooleanType()
    { n0 = new NodeChoice(n1, 0, 9); }
  |
    n2 = IntegerType()
    { n0 = new NodeChoice(n2, 1, 9); }
  |
    n3 = DoubleType()
    { n0 = new NodeChoice(n3, 2, 9); }
  |
    n4 = StringType()
    { n0 = new NodeChoice(n4, 3, 9); }
  |
    n5 = PlaceType()
    { n0 = new NodeChoice(n5, 4, 9); }
  |
    n6 = DistType()
    { n0 = new NodeChoice(n6, 5, 9); }
  |
    n7 = RegionType()
    { n0 = new NodeChoice(n7, 6, 9); }
  |
    n8 = PointType()
    { n0 = new NodeChoice(n8, 7, 9); }
  |
    n9 = ClassNameType()
    { n0 = new NodeChoice(n9, 8, 9); }
  )
  { return new NonArrayType(n0); }
}

BooleanType BooleanType() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = "boolean"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new BooleanType(n0); }
}

IntegerType IntegerType() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = "int"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new IntegerType(n0); }
}

DoubleType DoubleType() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = "double"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new DoubleType(n0); }
}

StringType StringType() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = "String"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new StringType(n0); }
}

PlaceType PlaceType() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = "place"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new PlaceType(n0); }
}

DistType DistType() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  RankEquation n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
}
{
  n1 = "dist"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = "("
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n5 = ":"
  { n4 = JTBToolkit.makeNodeToken(n5); }
  n6 = RankEquation()
  n8 = ")"
  { n7 = JTBToolkit.makeNodeToken(n8); }
  { return new DistType(n0, n2, n4, n6, n7); }
}

RegionType RegionType() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  RankEquation n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
}
{
  n1 = "region"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = "("
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n5 = ":"
  { n4 = JTBToolkit.makeNodeToken(n5); }
  n6 = RankEquation()
  n8 = ")"
  { n7 = JTBToolkit.makeNodeToken(n8); }
  { return new RegionType(n0, n2, n4, n6, n7); }
}

PointType PointType() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  RankEquation n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
}
{
  n1 = "point"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = "("
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n5 = ":"
  { n4 = JTBToolkit.makeNodeToken(n5); }
  n6 = RankEquation()
  n8 = ")"
  { n7 = JTBToolkit.makeNodeToken(n8); }
  { return new PointType(n0, n2, n4, n6, n7); }
}

ClassNameType ClassNameType() :
{
  // --- JTB generated node declarations ---
  Identifier n0 = null;
}
{
  n0 = Identifier()
  { return new ClassNameType(n0); }
}

Identifier Identifier() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < IDENTIFIER >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new Identifier(n0); }
}

/*
 * Statement syntax follows.
 */
Statement Statement() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  Assignment n1 = null;
  AsyncStatement n2 = null;
  Block n3 = null;
  FinishStatement n4 = null;
  IfStatement n5 = null;
  LoopStatement n6 = null;
  PostfixStatement n7 = null;
  PrintlnStatement n8 = null;
  ReturnStatement n9 = null;
  ThrowStatement n10 = null;
  WhileStatement n11 = null;
}
{
  (
    LOOKAHEAD( Assignment() )
    n1 = Assignment()
    { n0 = new NodeChoice(n1, 0, 11); }
  |
    n2 = AsyncStatement()
    { n0 = new NodeChoice(n2, 1, 11); }
  |
    n3 = Block()
    { n0 = new NodeChoice(n3, 2, 11); }
  |
    n4 = FinishStatement()
    { n0 = new NodeChoice(n4, 3, 11); }
  |
    n5 = IfStatement()
    { n0 = new NodeChoice(n5, 4, 11); }
  |
    n6 = LoopStatement()
    { n0 = new NodeChoice(n6, 5, 11); }
  |
    n7 = PostfixStatement()
    { n0 = new NodeChoice(n7, 6, 11); }
  |
    n8 = PrintlnStatement()
    { n0 = new NodeChoice(n8, 7, 11); }
  |
    n9 = ReturnStatement()
    { n0 = new NodeChoice(n9, 8, 11); }
  |
    n10 = ThrowStatement()
    { n0 = new NodeChoice(n10, 9, 11); }
  |
    n11 = WhileStatement()
    { n0 = new NodeChoice(n11, 10, 11); }
  )
  { return new Statement(n0); }
}

Assignment Assignment() :
{
  // --- JTB generated node declarations ---
  Expression n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  Expression n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
}
{
  n0 = Expression()
  n2 = "="
  { n1 = JTBToolkit.makeNodeToken(n2); }
  n3 = Expression()
  n5 = ";"
  { n4 = JTBToolkit.makeNodeToken(n5); }
  { return new Assignment(n0, n1, n3, n4); }
}

AsyncStatement AsyncStatement() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  Expression n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  Block n7 = null;
}
{
  n1 = "async"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = "("
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n4 = Expression()
  n6 = ")"
  { n5 = JTBToolkit.makeNodeToken(n6); }
  n7 = Block()
  { return new AsyncStatement(n0, n2, n4, n5, n7); }
}

Block Block() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeListOptional n2 = new NodeListOptional();
  BlockStatement n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
}
{
  n1 = "{"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  (
    n3 = BlockStatement()
    { n2.addNode(n3); }
  )*
  { n2.nodes.trimToSize(); }
  n5 = "}"
  { n4 = JTBToolkit.makeNodeToken(n5); }
  { return new Block(n0, n2, n4); }
}

BlockStatement BlockStatement() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  FinalVariableDeclaration n1 = null;
  UpdatableVariableDeclaration n2 = null;
  Statement n3 = null;
}
{
  (
    n1 = FinalVariableDeclaration()
    { n0 = new NodeChoice(n1, 0, 3); }
  |
    LOOKAHEAD( Type() Identifier() "=" )
    n2 = UpdatableVariableDeclaration()
    { n0 = new NodeChoice(n2, 1, 3); }
  |
    n3 = Statement()
    { n0 = new NodeChoice(n3, 2, 3); }
  )
  { return new BlockStatement(n0); }
}

FinalVariableDeclaration FinalVariableDeclaration() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Type n2 = null;
  Identifier n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  Expression n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
}
{
  n1 = "final"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Type()
  n3 = Identifier()
  n5 = "="
  { n4 = JTBToolkit.makeNodeToken(n5); }
  n6 = Expression()
  n8 = ";"
  { n7 = JTBToolkit.makeNodeToken(n8); }
  { return new FinalVariableDeclaration(n0, n2, n3, n4, n6, n7); }
}

UpdatableVariableDeclaration UpdatableVariableDeclaration() :
{
  // --- JTB generated node declarations ---
  Type n0 = null;
  Identifier n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  Expression n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
}
{
  n0 = Type()
  n1 = Identifier()
  n3 = "="
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n4 = Expression()
  n6 = ";"
  { n5 = JTBToolkit.makeNodeToken(n6); }
  { return new UpdatableVariableDeclaration(n0, n1, n2, n4, n5); }
}

FinishStatement FinishStatement() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Statement n2 = null;
}
{
  n1 = "finish"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Statement()
  { return new FinishStatement(n0, n2); }
}

IfStatement IfStatement() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  Expression n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  Statement n7 = null;
  NodeOptional n8 = new NodeOptional();
  ElseClause n9 = null;
}
{
  n1 = "if"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = "("
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n4 = Expression()
  n6 = ")"
  { n5 = JTBToolkit.makeNodeToken(n6); }
  n7 = Statement()
  [
    LOOKAHEAD( 1 )
    n9 = ElseClause()
    { n8.addNode(n9); }
  ]
  { return new IfStatement(n0, n2, n4, n5, n7, n8); }
}

ElseClause ElseClause() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Statement n2 = null;
}
{
  n1 = "else"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Statement()
  { return new ElseClause(n0, n2); }
}

LoopStatement LoopStatement() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  PointType n4 = null;
  ExplodedSpecification n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  Expression n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  Statement n11 = null;
}
{
  n1 = "for"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = "("
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n4 = PointType()
  n5 = ExplodedSpecification()
  n7 = ":"
  { n6 = JTBToolkit.makeNodeToken(n7); }
  n8 = Expression()
  n10 = ")"
  { n9 = JTBToolkit.makeNodeToken(n10); }
  n11 = Statement()
  { return new LoopStatement(n0, n2, n4, n5, n6, n8, n9, n11); }
}

ExplodedSpecification ExplodedSpecification() :
{
  // --- JTB generated node declarations ---
  IdentifierList n0 = null;
}
{
  n0 = IdentifierList()
  { return new ExplodedSpecification(n0); }
}

PointName PointName() :
{
  // --- JTB generated node declarations ---
  Identifier n0 = null;
}
{
  n0 = Identifier()
  { return new PointName(n0); }
}

IdentifierList IdentifierList() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Identifier n2 = null;
  NodeListOptional n3 = new NodeListOptional();
  IdentifierRest n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
}
{
  n1 = "["
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Identifier()
  (
    n4 = IdentifierRest()
    { n3.addNode(n4); }
  )*
  { n3.nodes.trimToSize(); }
  n6 = "]"
  { n5 = JTBToolkit.makeNodeToken(n6); }
  { return new IdentifierList(n0, n2, n3, n5); }
}

IdentifierRest IdentifierRest() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Identifier n2 = null;
}
{
  n1 = ","
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Identifier()
  { return new IdentifierRest(n0, n2); }
}

PostfixStatement PostfixStatement() :
{
  // --- JTB generated node declarations ---
  Expression n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
}
{
  n0 = Expression()
  n2 = ";"
  { n1 = JTBToolkit.makeNodeToken(n2); }
  { return new PostfixStatement(n0, n1); }
}

PrintlnStatement PrintlnStatement() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  Expression n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
}
{
  n1 = "System.out.println"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = "("
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n4 = Expression()
  n6 = ")"
  { n5 = JTBToolkit.makeNodeToken(n6); }
  n8 = ";"
  { n7 = JTBToolkit.makeNodeToken(n8); }
  { return new PrintlnStatement(n0, n2, n4, n5, n7); }
}

ReturnStatement ReturnStatement() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  Expression n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
}
{
  n1 = "return"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  [
    n3 = Expression()
    { n2.addNode(n3); }
  ]
  n5 = ";"
  { n4 = JTBToolkit.makeNodeToken(n5); }
  { return new ReturnStatement(n0, n2, n4); }
}

ThrowStatement ThrowStatement() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  Expression n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
}
{
  n1 = "throw"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = "new"
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n5 = "RuntimeException"
  { n4 = JTBToolkit.makeNodeToken(n5); }
  n7 = "("
  { n6 = JTBToolkit.makeNodeToken(n7); }
  n8 = Expression()
  n10 = ")"
  { n9 = JTBToolkit.makeNodeToken(n10); }
  n12 = ";"
  { n11 = JTBToolkit.makeNodeToken(n12); }
  { return new ThrowStatement(n0, n2, n4, n6, n8, n9, n11); }
}

WhileStatement WhileStatement() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  Expression n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  Statement n7 = null;
}
{
  n1 = "while"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = "("
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n4 = Expression()
  n6 = ")"
  { n5 = JTBToolkit.makeNodeToken(n6); }
  n7 = Statement()
  { return new WhileStatement(n0, n2, n4, n5, n7); }
}

/*
 * Expression syntax follows.
 */
Expression Expression() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  InclusiveOrExpression n1 = null;
  EqualsExpression n2 = null;
  NotEqualsExpression n3 = null;
  GreaterThanExpression n4 = null;
  PlusExpression n5 = null;
  MinusExpression n6 = null;
  TimesExpression n7 = null;
  DivideExpression n8 = null;
  SinExpression n9 = null;
  CosExpression n10 = null;
  PowExpression n11 = null;
  AbsExpression n12 = null;
  MapExpression n13 = null;
  RegionConstant n14 = null;
  UnaryMinusExpression n15 = null;
  CoercionToIntExpression n16 = null;
  CoercionToDoubleExpression n17 = null;
  TypeAnnotatedExpression n18 = null;
  FactoryBlock n19 = null;
  ArrayAccess n20 = null;
  DotDistribution n21 = null;
  DotIsFirst n22 = null;
  DotMethodCall n23 = null;
  DotIdentifier n24 = null;
  PrimaryExpression n25 = null;
}
{
  (
    LOOKAHEAD( PrimaryExpression() "|" )
    n1 = InclusiveOrExpression()
    { n0 = new NodeChoice(n1, 0, 25); }
  |
    LOOKAHEAD( PrimaryExpression() "==" )
    n2 = EqualsExpression()
    { n0 = new NodeChoice(n2, 1, 25); }
  |
    LOOKAHEAD( PrimaryExpression() "!=" )
    n3 = NotEqualsExpression()
    { n0 = new NodeChoice(n3, 2, 25); }
  |
    LOOKAHEAD( PrimaryExpression() ">" )
    n4 = GreaterThanExpression()
    { n0 = new NodeChoice(n4, 3, 25); }
  |
    LOOKAHEAD( PrimaryExpression() "+" )
    n5 = PlusExpression()
    { n0 = new NodeChoice(n5, 4, 25); }
  |
    LOOKAHEAD( PrimaryExpression() "-" )
    n6 = MinusExpression()
    { n0 = new NodeChoice(n6, 5, 25); }
  |
    LOOKAHEAD( PrimaryExpression() "*" )
    n7 = TimesExpression()
    { n0 = new NodeChoice(n7, 6, 25); }
  |
    LOOKAHEAD( PrimaryExpression() "/" )
    n8 = DivideExpression()
    { n0 = new NodeChoice(n8, 7, 25); }
  |
    LOOKAHEAD( 3 )
    n9 = SinExpression()
    { n0 = new NodeChoice(n9, 8, 25); }
  |
    LOOKAHEAD( 3 )
    n10 = CosExpression()
    { n0 = new NodeChoice(n10, 9, 25); }
  |
    LOOKAHEAD( 3 )
    n11 = PowExpression()
    { n0 = new NodeChoice(n11, 10, 25); }
  |
    LOOKAHEAD( 3 )
    n12 = AbsExpression()
    { n0 = new NodeChoice(n12, 11, 25); }
  |
    LOOKAHEAD( PrimaryExpression() "->" )
    n13 = MapExpression()
    { n0 = new NodeChoice(n13, 12, 25); }
  |
    LOOKAHEAD( RegionConstant() )
    n14 = RegionConstant()
    { n0 = new NodeChoice(n14, 13, 25); }
  |
    LOOKAHEAD( UnaryMinusExpression() )
    n15 = UnaryMinusExpression()
    { n0 = new NodeChoice(n15, 14, 25); }
  |
    LOOKAHEAD( CoercionToIntExpression() )
    n16 = CoercionToIntExpression()
    { n0 = new NodeChoice(n16, 15, 25); }
  |
    LOOKAHEAD( CoercionToDoubleExpression() )
    n17 = CoercionToDoubleExpression()
    { n0 = new NodeChoice(n17, 16, 25); }
  |
    LOOKAHEAD( TypeAnnotatedExpression() )
    n18 = TypeAnnotatedExpression()
    { n0 = new NodeChoice(n18, 17, 25); }
  |
    n19 = FactoryBlock()
    { n0 = new NodeChoice(n19, 18, 25); }
  |
    LOOKAHEAD( ArrayAccess() )
    n20 = ArrayAccess()
    { n0 = new NodeChoice(n20, 19, 25); }
  |
    LOOKAHEAD( DotDistribution() )
    n21 = DotDistribution()
    { n0 = new NodeChoice(n21, 20, 25); }
  |
    LOOKAHEAD( DotIsFirst() )
    n22 = DotIsFirst()
    { n0 = new NodeChoice(n22, 21, 25); }
  |
    LOOKAHEAD( DotMethodCall() )
    n23 = DotMethodCall()
    { n0 = new NodeChoice(n23, 22, 25); }
  |
    LOOKAHEAD( DotIdentifier() )
    n24 = DotIdentifier()
    { n0 = new NodeChoice(n24, 23, 25); }
  |
    n25 = PrimaryExpression()
    { n0 = new NodeChoice(n25, 24, 25); }
  )
  { return new Expression(n0); }
}

InclusiveOrExpression InclusiveOrExpression() :
{
  // --- JTB generated node declarations ---
  PrimaryExpression n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  Expression n3 = null;
}
{
  n0 = PrimaryExpression()
  n2 = "|"
  { n1 = JTBToolkit.makeNodeToken(n2); }
  n3 = Expression()
  { return new InclusiveOrExpression(n0, n1, n3); }
}

EqualsExpression EqualsExpression() :
{
  // --- JTB generated node declarations ---
  PrimaryExpression n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  Expression n3 = null;
}
{
  n0 = PrimaryExpression()
  n2 = "=="
  { n1 = JTBToolkit.makeNodeToken(n2); }
  n3 = Expression()
  { return new EqualsExpression(n0, n1, n3); }
}

NotEqualsExpression NotEqualsExpression() :
{
  // --- JTB generated node declarations ---
  PrimaryExpression n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  Expression n3 = null;
}
{
  n0 = PrimaryExpression()
  n2 = "!="
  { n1 = JTBToolkit.makeNodeToken(n2); }
  n3 = Expression()
  { return new NotEqualsExpression(n0, n1, n3); }
}

GreaterThanExpression GreaterThanExpression() :
{
  // --- JTB generated node declarations ---
  PrimaryExpression n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  Expression n3 = null;
}
{
  n0 = PrimaryExpression()
  n2 = ">"
  { n1 = JTBToolkit.makeNodeToken(n2); }
  n3 = Expression()
  { return new GreaterThanExpression(n0, n1, n3); }
}

PlusExpression PlusExpression() :
{
  // --- JTB generated node declarations ---
  PrimaryExpression n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  Expression n3 = null;
}
{
  n0 = PrimaryExpression()
  n2 = "+"
  { n1 = JTBToolkit.makeNodeToken(n2); }
  n3 = Expression()
  { return new PlusExpression(n0, n1, n3); }
}

MinusExpression MinusExpression() :
{
  // --- JTB generated node declarations ---
  PrimaryExpression n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  Expression n3 = null;
}
{
  n0 = PrimaryExpression()
  n2 = "-"
  { n1 = JTBToolkit.makeNodeToken(n2); }
  n3 = Expression()
  { return new MinusExpression(n0, n1, n3); }
}

TimesExpression TimesExpression() :
{
  // --- JTB generated node declarations ---
  PrimaryExpression n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  Expression n3 = null;
}
{
  n0 = PrimaryExpression()
  n2 = "*"
  { n1 = JTBToolkit.makeNodeToken(n2); }
  n3 = Expression()
  { return new TimesExpression(n0, n1, n3); }
}

DivideExpression DivideExpression() :
{
  // --- JTB generated node declarations ---
  PrimaryExpression n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  Expression n3 = null;
}
{
  n0 = PrimaryExpression()
  n2 = "/"
  { n1 = JTBToolkit.makeNodeToken(n2); }
  n3 = Expression()
  { return new DivideExpression(n0, n1, n3); }
}

SinExpression SinExpression() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  Expression n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
}
{
  n1 = "Math"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = "."
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n5 = "sin"
  { n4 = JTBToolkit.makeNodeToken(n5); }
  n7 = "("
  { n6 = JTBToolkit.makeNodeToken(n7); }
  n8 = Expression()
  n10 = ")"
  { n9 = JTBToolkit.makeNodeToken(n10); }
  { return new SinExpression(n0, n2, n4, n6, n8, n9); }
}

CosExpression CosExpression() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  Expression n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
}
{
  n1 = "Math"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = "."
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n5 = "cos"
  { n4 = JTBToolkit.makeNodeToken(n5); }
  n7 = "("
  { n6 = JTBToolkit.makeNodeToken(n7); }
  n8 = Expression()
  n10 = ")"
  { n9 = JTBToolkit.makeNodeToken(n10); }
  { return new CosExpression(n0, n2, n4, n6, n8, n9); }
}

PowExpression PowExpression() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  Expression n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  Expression n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
}
{
  n1 = "Math"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = "."
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n5 = "pow"
  { n4 = JTBToolkit.makeNodeToken(n5); }
  n7 = "("
  { n6 = JTBToolkit.makeNodeToken(n7); }
  n8 = Expression()
  n10 = ","
  { n9 = JTBToolkit.makeNodeToken(n10); }
  n11 = Expression()
  n13 = ")"
  { n12 = JTBToolkit.makeNodeToken(n13); }
  { return new PowExpression(n0, n2, n4, n6, n8, n9, n11, n12); }
}

AbsExpression AbsExpression() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  Expression n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
}
{
  n1 = "Math"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = "."
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n5 = "abs"
  { n4 = JTBToolkit.makeNodeToken(n5); }
  n7 = "("
  { n6 = JTBToolkit.makeNodeToken(n7); }
  n8 = Expression()
  n10 = ")"
  { n9 = JTBToolkit.makeNodeToken(n10); }
  { return new AbsExpression(n0, n2, n4, n6, n8, n9); }
}

MapExpression MapExpression() :
{
  // --- JTB generated node declarations ---
  PrimaryExpression n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  PrimaryExpression n3 = null;
}
{
  n0 = PrimaryExpression()
  n2 = "->"
  { n1 = JTBToolkit.makeNodeToken(n2); }
  n3 = PrimaryExpression()
  { return new MapExpression(n0, n1, n3); }
}

RegionConstant RegionConstant() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  ColonExpression n2 = null;
  NodeOptional n3 = new NodeOptional();
  ColonRest n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
}
{
  n1 = "["
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = ColonExpression()
  (
    n4 = ColonRest()
    { n3.addNode(n4); }
  )?
  n6 = "]"
  { n5 = JTBToolkit.makeNodeToken(n6); }
  { return new RegionConstant(n0, n2, n3, n5); }
}

ColonRest ColonRest() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  ColonExpression n2 = null;
}
{
  n1 = ","
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = ColonExpression()
  { return new ColonRest(n0, n2); }
}

ColonExpression ColonExpression() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  ColonPair n1 = null;
  Expression n2 = null;
}
{
  (
    LOOKAHEAD( Expression() ":" )
    n1 = ColonPair()
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    n2 = Expression()
    { n0 = new NodeChoice(n2, 1, 2); }
  )
  { return new ColonExpression(n0); }
}

ColonPair ColonPair() :
{
  // --- JTB generated node declarations ---
  Expression n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  Expression n3 = null;
}
{
  n0 = Expression()
  n2 = ":"
  { n1 = JTBToolkit.makeNodeToken(n2); }
  n3 = Expression()
  { return new ColonPair(n0, n1, n3); }
}

UnaryMinusExpression UnaryMinusExpression() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  PrimaryExpression n2 = null;
}
{
  n1 = "-"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = PrimaryExpression()
  { return new UnaryMinusExpression(n0, n2); }
}

CoercionToIntExpression CoercionToIntExpression() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  Expression n6 = null;
}
{
  n1 = "("
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = "int"
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n5 = ")"
  { n4 = JTBToolkit.makeNodeToken(n5); }
  n6 = Expression()
  { return new CoercionToIntExpression(n0, n2, n4, n6); }
}

CoercionToDoubleExpression CoercionToDoubleExpression() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  Expression n6 = null;
}
{
  n1 = "("
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = "double"
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n5 = ")"
  { n4 = JTBToolkit.makeNodeToken(n5); }
  n6 = Expression()
  { return new CoercionToDoubleExpression(n0, n2, n4, n6); }
}

TypeAnnotatedExpression TypeAnnotatedExpression() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  TypeAnnotation n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  Expression n5 = null;
}
{
  n1 = "("
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = TypeAnnotation()
  n4 = ")"
  { n3 = JTBToolkit.makeNodeToken(n4); }
  n5 = Expression()
  { return new TypeAnnotatedExpression(n0, n2, n3, n5); }
}

TypeAnnotation TypeAnnotation() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  UpdatableArrayType n1 = null;
  DistType n2 = null;
}
{
  (
    LOOKAHEAD( UpdatableArrayType() )
    n1 = UpdatableArrayType()
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    LOOKAHEAD( DistType() )
    n2 = DistType()
    { n0 = new NodeChoice(n2, 1, 2); }
  )
  { return new TypeAnnotation(n0); }
}

PrimaryExpression PrimaryExpression() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  Literal n1 = null;
  This n2 = null;
  AllocationExpression n3 = null;
  Identifier n4 = null;
}
{
  (
    n1 = Literal()
    { n0 = new NodeChoice(n1, 0, 4); }
  |
    n2 = This()
    { n0 = new NodeChoice(n2, 1, 4); }
  |
    n3 = AllocationExpression()
    { n0 = new NodeChoice(n3, 2, 4); }
  |
    n4 = Identifier()
    { n0 = new NodeChoice(n4, 3, 4); }
  )
  { return new PrimaryExpression(n0); }
}

This This() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = "this"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new This(n0); }
}

FactoryBlock FactoryBlock() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  Expression n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
}
{
  n1 = "dist.factory.block"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = "("
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n4 = Expression()
  n6 = ")"
  { n5 = JTBToolkit.makeNodeToken(n6); }
  { return new FactoryBlock(n0, n2, n4, n5); }
}

ArrayAccess ArrayAccess() :
{
  // --- JTB generated node declarations ---
  PrimaryExpression n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  ExpressionList n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
}
{
  n0 = PrimaryExpression()
  n2 = "["
  { n1 = JTBToolkit.makeNodeToken(n2); }
  n3 = ExpressionList()
  n5 = "]"
  { n4 = JTBToolkit.makeNodeToken(n5); }
  { return new ArrayAccess(n0, n1, n3, n4); }
}

DotMethodCall DotMethodCall() :
{
  // --- JTB generated node declarations ---
  PrimaryExpression n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  Identifier n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeOptional n6 = new NodeOptional();
  ExpressionList n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
}
{
  n0 = PrimaryExpression()
  n2 = "."
  { n1 = JTBToolkit.makeNodeToken(n2); }
  n3 = Identifier()
  n5 = "("
  { n4 = JTBToolkit.makeNodeToken(n5); }
  (
    n7 = ExpressionList()
    { n6.addNode(n7); }
  )?
  n9 = ")"
  { n8 = JTBToolkit.makeNodeToken(n9); }
  { return new DotMethodCall(n0, n1, n3, n4, n6, n8); }
}

DotDistribution DotDistribution() :
{
  // --- JTB generated node declarations ---
  PrimaryExpression n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
}
{
  n0 = PrimaryExpression()
  n2 = "."
  { n1 = JTBToolkit.makeNodeToken(n2); }
  n4 = "distribution"
  { n3 = JTBToolkit.makeNodeToken(n4); }
  { return new DotDistribution(n0, n1, n3); }
}

DotIsFirst DotIsFirst() :
{
  // --- JTB generated node declarations ---
  PrimaryExpression n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
}
{
  n0 = PrimaryExpression()
  n2 = "."
  { n1 = JTBToolkit.makeNodeToken(n2); }
  n4 = "isFirst"
  { n3 = JTBToolkit.makeNodeToken(n4); }
  n6 = "("
  { n5 = JTBToolkit.makeNodeToken(n6); }
  n8 = ")"
  { n7 = JTBToolkit.makeNodeToken(n8); }
  { return new DotIsFirst(n0, n1, n3, n5, n7); }
}

DotIdentifier DotIdentifier() :
{
  // --- JTB generated node declarations ---
  PrimaryExpression n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  Identifier n3 = null;
}
{
  n0 = PrimaryExpression()
  n2 = "."
  { n1 = JTBToolkit.makeNodeToken(n2); }
  n3 = Identifier()
  { return new DotIdentifier(n0, n1, n3); }
}

AllocationExpression AllocationExpression() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NewObject n1 = null;
  NewUpdatableArray n2 = null;
}
{
  (
    LOOKAHEAD( 3 )
    n1 = NewObject()
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    LOOKAHEAD( "new" NonArrayType() "[" )
    n2 = NewUpdatableArray()
    { n0 = new NodeChoice(n2, 1, 2); }
  )
  { return new AllocationExpression(n0); }
}

NewObject NewObject() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Identifier n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeOptional n5 = new NodeOptional();
  ExpressionList n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
}
{
  n1 = "new"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Identifier()
  n4 = "("
  { n3 = JTBToolkit.makeNodeToken(n4); }
  [
    n6 = ExpressionList()
    { n5.addNode(n6); }
  ]
  n8 = ")"
  { n7 = JTBToolkit.makeNodeToken(n8); }
  { return new NewObject(n0, n2, n3, n5, n7); }
}

NewUpdatableArray NewUpdatableArray() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NonArrayType n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  Identifier n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeOptional n8 = new NodeOptional();
  ArrayInitializer n9 = null;
}
{
  n1 = "new"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = NonArrayType()
  n4 = "["
  { n3 = JTBToolkit.makeNodeToken(n4); }
  n5 = Identifier()
  n7 = "]"
  { n6 = JTBToolkit.makeNodeToken(n7); }
  [
    LOOKAHEAD( ArrayInitializer() )
    n9 = ArrayInitializer()
    { n8.addNode(n9); }
  ]
  { return new NewUpdatableArray(n0, n2, n3, n5, n6, n8); }
}

Literal Literal() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  IntegerLiteral n1 = null;
  FloatingPointLiteral n2 = null;
  StringLiteral n3 = null;
  HereLiteral n4 = null;
  DistUnique n5 = null;
}
{
  (
    n1 = IntegerLiteral()
    { n0 = new NodeChoice(n1, 0, 5); }
  |
    n2 = FloatingPointLiteral()
    { n0 = new NodeChoice(n2, 1, 5); }
  |
    n3 = StringLiteral()
    { n0 = new NodeChoice(n3, 2, 5); }
  |
    n4 = HereLiteral()
    { n0 = new NodeChoice(n4, 3, 5); }
  |
    n5 = DistUnique()
    { n0 = new NodeChoice(n5, 4, 5); }
  )
  { return new Literal(n0); }
}

IntegerLiteral IntegerLiteral() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < INTEGER_LITERAL >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new IntegerLiteral(n0); }
}

FloatingPointLiteral FloatingPointLiteral() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < FLOATING_POINT_LITERAL >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new FloatingPointLiteral(n0); }
}

StringLiteral StringLiteral() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < STRING_LITERAL >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new StringLiteral(n0); }
}

HereLiteral HereLiteral() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = "here"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new HereLiteral(n0); }
}

DistUnique DistUnique() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = "dist.UNIQUE"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new DistUnique(n0); }
}

ExpressionList ExpressionList() :
{
  // --- JTB generated node declarations ---
  Expression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  ArgumentRest n2 = null;
}
{
  n0 = Expression()
  (
    n2 = ArgumentRest()
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { return new ExpressionList(n0, n1); }
}

ArgumentRest ArgumentRest() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Expression n2 = null;
}
{
  n1 = ","
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Expression()
  { return new ArgumentRest(n0, n2); }
}

ArrayInitializer ArrayInitializer() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  PointType n2 = null;
  ExplodedSpecification n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  Block n6 = null;
}
{
  n1 = "("
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = PointType()
  n3 = ExplodedSpecification()
  n5 = ")"
  { n4 = JTBToolkit.makeNodeToken(n5); }
  n6 = Block()
  { return new ArrayInitializer(n0, n2, n3, n4, n6); }
}
